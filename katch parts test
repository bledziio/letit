_G.autoQuest = false
_G.selectedBall = "#2"
_G.selectedWorld = "world8" -- Default world
_G.partnerCreature = "@424" -- Global variable for partner creature
-- Define Pokémon lists for different worlds
local pokemonLists = {
    world8 = {
        {name = "Bouldrunt", fallback = "Bouldram", coords = Vector3.new(1972, 0, -1116)},
        {name = "Voidpup", fallback = "Voidstalker", coords = Vector3.new(1571.59716796875, 0, -1052.0155029296875)},
        {name = "Frostkit", fallback = "Frostfang", coords = Vector3.new(1932, 0, -1276)},
        {name = "Quarrykit", fallback = "Quarryclaw", coords = Vector3.new(2004, 0, -823.270263671875)},
        {name = "Driplet", fallback = "Hydromusk", coords = Vector3.new(1668, 0, -1268)},
        {name = "Terrazee", fallback = "Terrakong", coords = Vector3.new(1668, 0, -1268)},
        {name = "Gemara", fallback = nil, coords = Vector3.new(1796, 0, -1060)}
    },
    world9 = {
        {name = "Lavasnip", fallback = "Lavafang", coords = Vector3.new(2000, 0, -1500)},
        {name = "Abysspup", fallback = "Abyssstalker", coords = Vector3.new(1600, 0, -1300)},
        -- Add more entries for World 9 as needed
    },
    world10 = {
        {name = "Stormkit", fallback = "Stormfang", coords = Vector3.new(1800, 0, -1200)},
        {name = "Cavernkit", fallback = "Cavernclaw", coords = Vector3.new(1900, 0, -1100)},
        -- Add more entries for World 10 as needed
    }
}

local task_defer = task.defer

local function invokeService(servicePath, args)
    print("Invoking service: " .. servicePath)
    game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("_Index")
        :WaitForChild("sleitnick_knit@1.7.0")
        :WaitForChild("knit")
        :WaitForChild("Services")
        :WaitForChild("PlayerService")
        :WaitForChild("RF")
        :WaitForChild(servicePath)
        :InvokeServer(unpack(args))
end

local function invokeCreatureService(servicePath, args)
    print("Invoking creature service: " .. servicePath)
    game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("_Index")
        :WaitForChild("sleitnick_knit@1.7.0")
        :WaitForChild("knit")
        :WaitForChild("Services")
        :WaitForChild("CreatureService")
        :WaitForChild("RF")
        :WaitForChild(servicePath)
        :InvokeServer(unpack(args))
end

local function tameCreature(creatureName)
    print("Starting tameCreature for: " .. creatureName)
    invokeService("RequestStartTameCreature", {creatureName, _G.selectedBall})
    print("Requested Start Tame Creature")
    invokeService("RequestEndTameCreature", {creatureName})
    print("Requested End Tame Creature")
end

local function moveToPosition(humanoid, targetPosition, stopDistance)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    humanoid:MoveTo(targetPosition)
    print("MoveTo command issued to position: " .. tostring(targetPosition))
    local moveStartTime = tick()
    local reached = false

    humanoid.MoveToFinished:Connect(function(isReached)
        if isReached then
            print("Reached target position")
            reached = true
        else
            print("Failed to reach target position")
        end
    end)

    while tick() - moveStartTime < 10 do -- 10 seconds timeout
        if reached then
            break
        end
        -- Check if character is stuck and needs to be redirected or teleported
        local currentDistance = (humanoidRootPart.Position - targetPosition).magnitude
        if currentDistance > stopDistance then
            humanoid:MoveTo(targetPosition)
            print("Reissuing MoveTo command")
        end
        task.wait(0.5)
    end

    -- Teleport if the character is ultra stuck
    if not reached then
        humanoidRootPart.CFrame = CFrame.new(targetPosition)
        print("Teleported to target position")
        reached = true
    end

    return reached
end

local function summonPartnerCreature()
    local deployArgs = { _G.partnerCreature }
    invokeCreatureService("RequestDeployPetInit", deployArgs)
    print("Summoned partner creature: " .. _G.partnerCreature)
end

local function attackFallbackPokemon(creatureName)
    -- Recall partner creature
    local recallArgs = { _G.partnerCreature }
    invokeCreatureService("RequestRecallPet", recallArgs)
    print("Recalled partner creature: " .. _G.partnerCreature)

    -- Resummon partner creature
    summonPartnerCreature()
    
    -- Attack logic
    print("Attacking fallback Pokemon: " .. creatureName)

    -- Use ultimate skill after 2 seconds
    task.wait(2)
    local ultimateArgs = { _G.partnerCreature, 5 }
    invokeCreatureService("RequestCreatureBehaviorChange", ultimateArgs)
    print("Used ultimate skill of partner creature: " .. _G.partnerCreature)
end

local function setPlayerMoveSpeed(speed)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    humanoid.WalkSpeed = speed
    print("Set player move speed to: " .. speed)
end

local function checkQuestAndCapture()
    print("Starting checkQuestAndCapture")
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    local stopDistance = 5 -- Adjust this distance to stop before the object
    
    -- Player position at world center based on the world
    local worldCenters = {
        world8 = Vector3.new(1853.481689453125, 0.6721579432487488, -1133.0943603515625),
        world9 = Vector3.new(1900, 0, -1400),
        world10 = Vector3.new(1950, 0, -1200)
    }
    local centerPosition = worldCenters[_G.selectedWorld] or worldCenters["world8"]
    humanoidRootPart.CFrame = CFrame.new(centerPosition)
    print("Teleported to world center: " .. tostring(centerPosition))
    task.wait(1) -- Wait for teleport to complete
    summonPartnerCreature()
    setPlayerMoveSpeed(91)

    -- Respawn handler
    local function onRespawned()
        humanoidRootPart.CFrame = CFrame.new(centerPosition)
        print("Teleported back to world center after respawn")
        task.wait(1) -- Wait for teleport to complete
        summonPartnerCreature()
        setPlayerMoveSpeed(91)
    end

    player.CharacterAdded:Connect(onRespawned)

    while _G.autoQuest do
        print("AutoQuest is running")
        local questText = game:GetService("Players").LocalPlayer.PlayerGui.QuestTrackerUI.Frame.textFrame.objective.title1.Text
        print("Quest Text: " .. questText)
        local questPokemonList = pokemonLists[_G.selectedWorld] -- Use the selected world's list
        local targetPokemon = nil
        local fallbackPokemon = nil
        local targetCoords = nil

        -- Find target and fallback Pokémon from the quest text
        for _, group in ipairs(questPokemonList) do
            if questText:find(group.name) then
                targetPokemon = group.name
                fallbackPokemon = group.fallback
                targetCoords = group.coords
                print("Target Pokemon: " .. targetPokemon .. " | Fallback Pokemon: " .. fallbackPokemon .. " | Coords: " .. tostring(targetCoords))
                break
            end
        end

        if targetPokemon and targetCoords then
            -- Move to the target coordinates
            if moveToPosition(humanoid, targetCoords, stopDistance) then
                local foundCreature = false
                local attempts = 0

                while not foundCreature and attempts < 5 do
                    print("Search attempt: " .. attempts)
                    attempts = attempts + 1

                    local allCreatures = workspace.Creatures:GetChildren() -- Refresh list of creatures

                    for _, creature in ipairs(allCreatures) do
                        local playerNameText = creature:FindFirstChild("RootPart")
                            and creature.RootPart:FindFirstChild("TitanNameplate")
                            and creature.RootPart.TitanNameplate:FindFirstChild("InfoFrame")
                            and creature.RootPart.TitanNameplate.InfoFrame:FindFirstChild("PlayerName")
                            and creature.RootPart.TitanNameplate.InfoFrame.PlayerName.Text

                        print("Checking creature: " .. creature.Name .. " | Player Name: " .. (playerNameText or "nil"))

                        if playerNameText and playerNameText:find(targetPokemon) then
                            print("Found target Pokemon: " .. creature.Name)
                            -- Calculate the position to stop before the object
                            local targetPosition = creature:GetPrimaryPartCFrame().Position
                            local direction = (targetPosition - humanoidRootPart.Position).unit
                            local stopPosition = targetPosition - direction * stopDistance

                            print("Target Position: " .. tostring(targetPosition) .. " | Stop Position: " .. tostring(stopPosition))

                            -- Move character to the stop position facing the object
                            if moveToPosition(humanoid, stopPosition, stopDistance) then
                                -- Execute the taming code
                                tameCreature(creature.Name)
                                print("Tamed target Pokemon")
                                foundCreature = true

                                -- Check if quest is completed
                                local captures = game:GetService("Players").LocalPlayer.leaderstats.Captures.Value
                                print("Current Captures: " .. captures)

                                -- Request release of the captured creature
                                local releaseArgs = { [1] = "@" .. tostring(captures) }
                                invokeCreatureService("RequestReleasePet", releaseArgs)
                                print("Released Pokemon with capture value: " .. tostring(captures))

                                break
                            end
                        end
                    end

                    if not foundCreature and attempts == 5 then
                        -- Switch to fallback Pokémon if the target Pokémon is not found after 5 attempts
                        targetPokemon = fallbackPokemon
                        print("Switching to fallback Pokemon: " .. fallbackPokemon)
                        attempts = 0 -- Reset attempts for the fallback Pokemon search
                        attackFallbackPokemon(targetPokemon)
                    end
                end
            end

            -- Request to complete the quest
            local completeQuestArgs = { [1] = "#" .. string.sub(_G.selectedWorld, -1) }
            invokeService("RequestCompleteNpcQuest", completeQuestArgs)
            print("Requested quest completion for world: " .. _G.selectedWorld)

            -- Request a new quest
            local startQuestArgs = { [1] = "#" .. string.sub(_G.selectedWorld, -1) }
            invokeService("RequestStartNpcQuest", startQuestArgs)
            print("Requested new quest for world: " .. _G.selectedWorld)
        else
            print("No matching Pokemon found in quest text")
        end
        
        task.wait(1) -- Wait to reduce system load
    end
end


-- Load OrionLib
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Orion/main/source'))()

-- Create a window
local Window = OrionLib:MakeWindow({Name = "Quest GUI", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Create tabs
local Tab = Window:MakeTab({Name = "Quest", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- World selection options
local worldOptions = {"world8", "world9", "world10"}
Tab:AddDropdown({
    Name = "Select World",
    Default = "world8",
    Options = worldOptions,
    Callback = function(selected)
        _G.selectedWorld = selected
        print("Selected World: " .. selected)
    end
})

-- Ball selection options
local ballOptions = {"#1", "#2", "#3"}
Tab:AddDropdown({
    Name = "Select Ball",
    Default = "#2",
    Options = ballOptions,
    Callback = function(selected)
        _G.selectedBall = selected
        print("Selected Ball: " .. selected)
    end
})

-- Quest capture toggle
Tab:AddToggle({
    Name = "Quest Capture",
    Default = false,
    Callback = function(bool)
        _G.autoQuest = bool
        if _G.autoQuest then
            task_defer(checkQuestAndCapture)
        end
    end
})

-- Add a keybind to open/close the UI
Tab:AddBind({
    Name = "Toggleee UI",
    Default = Enum.KeyCode.P,
    Hold = false,
    Callback = function()
        OrionLib:ToggleUI()
    end
})

print("Setup complete")
OrionLib:Init()
