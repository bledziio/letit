
_G.auto = false
_G.auto2 = false
_G.autoQuest = false
local task_defer = task.defer
local pokemon = "Shadowpaw"
local fallbackPokemon = "Shadowclaw"
local maxCheckAttempts = 5
local maxFallbackAttempts = 3

local objectNames = {"#1083", "#938", "#1140", "#212", "#209", "#358", "#1081", "#616", "#1082", "#970"}
local objectNames2 = {"#1016", "#1090", "#148", "#926", "#1091", "#156", "#1099", "#395", "#415", "#865"}
local objectNames3 = {"#996", "#988", "#1065", "#995", "#1062", "#1063", "#1064", "#1066"}
local objectNames4 = {"#719", "#364", "#201", "#245", "#187", "#718", "#1096", "#720", "#721"}
local questPokemonList = {
    {"Bouldrunt", "Bouldram"},
    {"Voidpup", "Voidstalker"},
    {"Frostkit", "Frostfang"},
    {"Wuarrykit", "Quarryclaw"},
    {"Driplet", "Hydromusk"},
    {"Terrazee", "Terrakong"},
    {"Gemara"}
}

local function invokeService(servicePath, args)
    game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("_Index")
        :WaitForChild("sleitnick_knit@1.7.0")
        :WaitForChild("knit")
        :WaitForChild("Services")
        :WaitForChild("PlayerService")
        :WaitForChild("RF")
        :WaitForChild(servicePath)
        :InvokeServer(unpack(args))
end

local function requestEquipWeapon(weaponCode)
    invokeService("RequestEquipWeapon", {weaponCode})
end

local function tameCreature(creatureName)
    invokeService("RequestStartTameCreature", {creatureName, "#2"})
    invokeService("RequestEndTameCreature", {creatureName})
end

local function attackShadowclaw(creatureName)
    while workspace.Creatures:FindFirstChild(creatureName) do
        invokeService("AttackStart", {1})
        invokeService("OnPlayerHitObject", {2, creatureName})
        invokeService("AttackEnd", {1})
        task.wait(0.5) -- Adjust the wait time for smoother execution
    end
end

local function moveToAndInvoke(objects)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local stopDistance = 5 -- Adjust this distance to stop before the object

    while _G.auto do
        -- reset timer
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index")
        :WaitForChild("sleitnick_knit@1.7.0"):WaitForChild("knit"):WaitForChild("Services")
        :WaitForChild("PlayerService"):WaitForChild("RF"):WaitForChild("ResetIdleTimer"):InvokeServer()
        for _, objectName in ipairs(objects) do
            if not _G.auto then break end  -- Stop if _G.auto is set to false
            
            local targetObject = workspace.Scene.Resources:FindFirstChild(objectName)
            if targetObject then
                local targetPosition = targetObject:GetPrimaryPartCFrame().Position
                local direction = (targetPosition - character.PrimaryPart.Position).unit
                local stopPosition = targetPosition - direction * stopDistance

                -- Equip the appropriate weapon before moving
                local weaponCodes = {
                    ["#1140"] = "@8", ["#1083"] = "@8", ["#1081"] = "@8", ["#970"] = "@8",
                    ["#938"] = "@8", ["#1082"] = "@8", ["#1016"] = "@8", ["#1090"] = "@8",
                    ["#148"] = "@8", ["#926"] = "@8", ["#1091"] = "@8", ["#156"] = "@8",
                    ["#1099"] = "@8", ["#996"] = "@8", ["#995"] = "@8", ["#1065"] = "@8",
                    ["#1062"] = "@8", ["#1063"] = "@8", ["#1064"] = "@8", ["#1066"] = "@8",
                    ["#988"] = "@8"
                }
                requestEquipWeapon(weaponCodes[objectName] or "@12")

                -- Move character to the stop position
                humanoid:MoveTo(stopPosition)
                humanoid.MoveToFinished:Wait()  -- Wait until movement is finished
                
                -- Repeat the invoke services for a specified duration
                local durations = {
                    ["#1140"] = 12, ["#148"] = 12, ["#156"] = 12,
                    ["#996"] = 9, ["#995"] = 9, ["#1016"] = 9
                }
                local duration = durations[objectName] or 5
                local endTime = tick() + duration

                while tick() < endTime do
                    if not _G.auto then break end  -- Stop if _G.auto is set to false

                    invokeService("AttackStart", {1})
                    invokeService("OnPlayerHitObject", {4, objectName})
                    invokeService("AttackEnd", {1})
                    task.wait() -- Adjust the wait time for smoother execution
                end
                
                task.wait() -- Wait before moving to the next object
            end
        end
    end
end

local function findClosestCreature(creatures, position)
    local closestCreature = nil
    local closestDistance = math.huge
    
    for _, creature in ipairs(creatures) do
        local creaturePosition = creature:GetPrimaryPartCFrame().Position
        local distance = (creaturePosition - position).magnitude
        if distance < closestDistance then
            closestCreature = creature
            closestDistance = distance
        end
    end
    
    return closestCreature
end

local function checkForMoolet()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    local stopDistance = 5 -- Adjust this distance to stop before the object
    local checkAttempts = 0
    local fallbackAttempts = 0
    local usingFallback = false

    while _G.auto2 do
        local foundCreature = false
        local currentPokemon = usingFallback and fallbackPokemon or pokemon
        local allCreatures = {}
        
        for _, creature in ipairs(workspace.Creatures:GetChildren()) do
            local playerNameText = creature:FindFirstChild("RootPart")
                and creature.RootPart:FindFirstChild("TitanNameplate")
                and creature.RootPart.TitanNameplate:FindFirstChild("InfoFrame")
                and creature.RootPart.TitanNameplate.InfoFrame:FindFirstChild("PlayerName")
                and creature.RootPart.TitanNameplate.InfoFrame.PlayerName.Text

            if playerNameText and playerNameText:find(currentPokemon) then
                table.insert(allCreatures, creature)
            end
        end
        
        local targetCreature = findClosestCreature(allCreatures, humanoidRootPart.Position)
        
        if targetCreature then
            -- Calculate the position to stop before the object
            local targetPosition = targetCreature:GetPrimaryPartCFrame().Position
            local direction = (targetPosition - humanoidRootPart.Position).unit
            local stopPosition = targetPosition - direction * stopDistance

            -- Move character to the stop position facing the object
            humanoid:MoveTo(stopPosition)
            humanoid.MoveToFinished:Wait()  -- Wait until movement is finished

            if currentPokemon == pokemon then
                -- Execute the taming code
                tameCreature(targetCreature.Name)
            else
                -- Execute the attack code for Shadowclaw
                attackShadowclaw(targetCreature.Name)
            end

            task.wait(1)
            foundCreature = true
            checkAttempts = 0  -- Reset check attempts after a successful find
            fallbackAttempts = 0  -- Reset fallback attempts after a successful find
        end

        if not foundCreature then
            checkAttempts = checkAttempts + 1

            if usingFallback then
                fallbackAttempts = fallbackAttempts + 1

                if fallbackAttempts >= maxFallbackAttempts then
                    usingFallback = false  -- Switch back to original search
                    fallbackAttempts = 0  -- Reset fallback attempts
                end
            elseif checkAttempts >= maxCheckAttempts then
                usingFallback = true  -- Switch to fallback search
                checkAttempts = 0  -- Reset check attempts
            end

            task.wait(1)  -- Wait before checking again
        end
    end
end

local function checkQuestAndCapture()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local stopDistance = 5 -- Adjust this distance to stop before the object
    
    -- Player position at world 8 center
    humanoidRootPart.CFrame = CFrame.new(1853.481689453125, 0.6721579432487488, -1133.0943603515625)
    task.wait(1) -- Wait for teleport to complete

    while _G.autoQuest do
        local questText = game:GetService("Players").LocalPlayer.PlayerGui.QuestTrackerUI.Frame.textFrame.objective.title1.Text
        local targetPokemon = nil
        local fallbackPokemon = nil

        -- Find target and fallback Pok√©mon from the quest text
        for _, group in ipairs(questPokemonList) do
            if questText:find(group[1]) then
                targetPokemon = group[1]
                fallbackPokemon = group[2] or group[1]
                break
            end
        end

        if targetPokemon then
            local foundCreature = false
            local attempts = 0

            while not foundCreature and attempts < 10 do
                attempts = attempts + 1

                for _, creature in ipairs(workspace.Creatures:GetChildren()) do
                    local playerNameText = creature:FindFirstChild("RootPart")
                        and creature.RootPart:FindFirstChild("TitanNameplate")
                        and creature.RootPart.TitanNameplate:FindFirstChild("InfoFrame")
                        and creature.RootPart.TitanNameplate.InfoFrame:FindFirstChild("PlayerName")
                        and creature.RootPart.TitanNameplate.InfoFrame.PlayerName.Text

                    if playerNameText and playerNameText:find(targetPokemon) then
                        -- Calculate the position to stop before the object
                        local targetPosition = creature:GetPrimaryPartCFrame().Position
                        local direction = (targetPosition - humanoidRootPart.Position).unit
                        local stopPosition = targetPosition - direction * stopDistance

                        -- Move character to the stop position facing the object
                        humanoid:MoveTo(stopPosition)
                        humanoid.MoveToFinished:Wait()  -- Wait until movement is finished

                        -- Execute the taming code
                        tameCreature(creature.Name)
                        foundCreature = true
                        task.wait(1)

                        -- Check if quest is completed
                        local captures = game:GetService("Players").LocalPlayer.leaderstats.Captures.Value

                        -- Request release of the captured creature
                        local releaseArgs = { [1] = "@" .. tostring(captures) }
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Packages")
                            :WaitForChild("_Index")
                            :WaitForChild("sleitnick_knit@1.7.0")
                            :WaitForChild("knit")
                            :WaitForChild("Services")
                            :WaitForChild("CreatureService")
                            :WaitForChild("RF")
                            :WaitForChild("RequestReleasePet")
                            :InvokeServer(unpack(releaseArgs))
                        task.wait()

                        break
                    end
                end

                if not foundCreature and attempts == 5 then
                    -- Switch to fallback Pok√©mon if the target Pok√©mon is not found after 5 attempts
                    targetPokemon = fallbackPokemon
                end
            end

            -- Request to complete the quest
            local completeQuestArgs = { [1] = "#8" }
            game:GetService("ReplicatedStorage")
                :WaitForChild("Packages")
                :WaitForChild("_Index")
                :WaitForChild("sleitnick_knit@1.7.0")
                :WaitForChild("knit")
                :WaitForChild("Services")
                :WaitForChild("PlayerService")
                :WaitForChild("RF")
                :WaitForChild("RequestCompleteNpcQuest")
                :InvokeServer(unpack(completeQuestArgs))

            task.wait()
            -- Request a new quest
            local startQuestArgs = { [1] = "#8" }
            game:GetService("ReplicatedStorage")
                :WaitForChild("Packages")
                :WaitForChild("_Index")
                :WaitForChild("sleitnick_knit@1.7.0")
                :WaitForChild("knit")
                :WaitForChild("Services")
                :WaitForChild("PlayerService")
                :WaitForChild("RF")
                :WaitForChild("RequestStartNpcQuest")
                :InvokeServer(unpack(startQuestArgs))
        end
        
        task.wait(1)
    end
end

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
local window = library:Window("farm")

window:Toggle("find Moolet", false, function(bool)
    _G.auto2 = bool
    if _G.auto2 then
        task_defer(checkForMoolet)
    end
end)

window:Button("world 6 start", function() 
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    -- Define the target position
    local targetPosition = Vector3.new(876, 0, -479)
    -- Teleport the character to the target position
    humanoidRootPart.CFrame = CFrame.new(targetPosition) 
end)

window:Toggle("world 6", false, function(bool)
    _G.auto = bool
    task_defer(moveToAndInvoke(objectNames))
end)

window:Button("world 7 start", function() 
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    -- Define the target position
    local targetPosition = Vector3.new(1524, 0, -138) 
    -- Teleport the character to the target position
    humanoidRootPart.CFrame = CFrame.new(targetPosition)
end)

window:Toggle("world 7", false, function(bool)
    _G.auto = bool
    task_defer(moveToAndInvoke(objectNames2))
end)
window:Toggle("world 7 wood ", false, function(bool)
    _G.auto = bool
    task_defer(moveToAndInvoke(objectNames4))
end)
window:Button("mundo 4 start", function() 
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    -- Define the target position
    local targetPosition = Vector3.new(788, 0, -2009) 
    -- Teleport the character to the target position
    humanoidRootPart.CFrame = CFrame.new(targetPosition)
end)

window:Toggle("world 4 iron", false, function(bool)
    _G.auto = bool
    task_defer(moveToAndInvoke(objectNames3))
end)

window:Toggle("quest capture", false, function(bool)
    _G.autoQuest = bool
    if _G.autoQuest then
        task_defer(checkQuestAndCapture)
    end
end)

library:Keybind("P")



--https://raw.githubusercontent.com/bledziio/letit/refs/heads/main/katch
--loadstring(game:HttpGet("https://raw.githubusercontent.com/bledziio/letit/refs/heads/main/katch"))()
